package idl.library;


/**
* idl/library/_LibraryStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from idl/drms.idl
* Saturday, November 29, 2014 8:56:31 PM EST
*/

public class _LibraryStub extends org.omg.CORBA.portable.ObjectImpl implements idl.library.Library
{


  /**
  			 * When a student invokes this method through a client program called StudentClient, the server associated with the
  			 * educational institution attempts to create an account with the information passed if the username does not exist.
  			 * 
  			 * @param firstName
  			 * @param lastName
  			 * @param emailAddress
  			 * @param phoneNumber
  			 * @param username
  			 * @param password
  			 * @param educationalInstitution
  			 * @return true if account was created on replica.
  			 */
  public boolean createAccount (String firstName, String lastName, String emailAddress, String phoneNumber, String username, String password, String educationalInstitution)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("createAccount", true);
                $out.write_string (firstName);
                $out.write_string (lastName);
                $out.write_string (emailAddress);
                $out.write_string (phoneNumber);
                $out.write_string (username);
                $out.write_string (password);
                $out.write_string (educationalInstitution);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return createAccount (firstName, lastName, emailAddress, phoneNumber, username, password, educationalInstitution        );
            } finally {
                _releaseReply ($in);
            }
  } // createAccount


  /**
  			 * Attempts to find if the book exist (quantity should be greater than 0 to successfully reserve). If it does, then 
  			 * the corresponding quantity is decremented and the book is updated to the reserved book list of the student. The 
  			 * duration is set to 14 days by default.
  			 * 
  			 * @param username
  			 * @param password
  			 * @param bookName
  			 * @param authorName
  			 * @return true if book was successfully reserved. 
  			 */
  public boolean reserveBook (String username, String password, String bookName, String authorName)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("reserveBook", true);
                $out.write_string (username);
                $out.write_string (password);
                $out.write_string (bookName);
                $out.write_string (authorName);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return reserveBook (username, password, bookName, authorName        );
            } finally {
                _releaseReply ($in);
            }
  } // reserveBook


  /**
  			 * Similar to {@link #reserveBook(string username, string password, string bookName, string authorName)}, but tries 
  			 * to reserve the book in any of the libraries in the system.
  			 * 
  			 * @param username
  			 * @param password
  			 * @param bookName
  			 * @param authorName
  			 * @return true if book was successfully reserved. 
  			 */
  public boolean reserveInterLibrary (String username, String password, String bookName, String authorName)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("reserveInterLibrary", true);
                $out.write_string (username);
                $out.write_string (password);
                $out.write_string (bookName);
                $out.write_string (authorName);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return reserveInterLibrary (username, password, bookName, authorName        );
            } finally {
                _releaseReply ($in);
            }
  } // reserveInterLibrary


  /**
  			 * Lists all the students First Name, Last Name and Phone Number who have not returned the books with NumDays past 
  			 * their loan date in all the three educational institutions.
  			 * 
  			 * @param adminUsername
  			 * @param adminPassword
  			 * @param educationalInstitution
  			 * @param numDays
  			 * @return
  			 * @throws RemoteException
  			 */
  public String[] getNonRetuners (String adminUsername, String adminPassword, String educationalInstitution, int numDays)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getNonRetuners", true);
                $out.write_string (adminUsername);
                $out.write_string (adminPassword);
                $out.write_string (educationalInstitution);
                $out.write_long (numDays);
                $in = _invoke ($out);
                String $result[] = idl.library.LibraryPackage.resultHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getNonRetuners (adminUsername, adminPassword, educationalInstitution, numDays        );
            } finally {
                _releaseReply ($in);
            }
  } // getNonRetuners

  public boolean setDuration (String username, String bookName, int num_of_days)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setDuration", true);
                $out.write_string (username);
                $out.write_string (bookName);
                $out.write_long (num_of_days);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return setDuration (username, bookName, num_of_days        );
            } finally {
                _releaseReply ($in);
            }
  } // setDuration


  /**
  			 * Shut down library and releases udp port.
  			 */
  public void shutDown ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("shutDown", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                shutDown (        );
            } finally {
                _releaseReply ($in);
            }
  } // shutDown


  /**
  			 * Set udpPort of the replica.
  			 * @param port The replica udp port.
  			 */
  public void setUdpPort (int port)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setUdpPort", true);
                $out.write_long (port);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setUdpPort (port        );
            } finally {
                _releaseReply ($in);
            }
  } // setUdpPort


  /**
  			 * set byzantine flag to say if replica with give wrong responses.
  			 * @param byzantineFlag True if replica should generate software errors.
  			 */
  public void setByzantineFlag (boolean byzantineFlag)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setByzantineFlag", true);
                $out.write_boolean (byzantineFlag);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setByzantineFlag (byzantineFlag        );
            } finally {
                _releaseReply ($in);
            }
  } // setByzantineFlag

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:idl/library/Library:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _LibraryStub
