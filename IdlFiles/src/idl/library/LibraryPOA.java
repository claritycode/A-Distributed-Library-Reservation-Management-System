package idl.library;


/**
* idl/library/LibraryPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from idl/drms.idl
* Saturday, November 29, 2014 8:56:31 PM EST
*/

public abstract class LibraryPOA extends org.omg.PortableServer.Servant
 implements idl.library.LibraryOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("createAccount", new java.lang.Integer (0));
    _methods.put ("reserveBook", new java.lang.Integer (1));
    _methods.put ("reserveInterLibrary", new java.lang.Integer (2));
    _methods.put ("getNonRetuners", new java.lang.Integer (3));
    _methods.put ("setDuration", new java.lang.Integer (4));
    _methods.put ("shutDown", new java.lang.Integer (5));
    _methods.put ("setUdpPort", new java.lang.Integer (6));
    _methods.put ("setByzantineFlag", new java.lang.Integer (7));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /**
  			 * When a student invokes this method through a client program called StudentClient, the server associated with the
  			 * educational institution attempts to create an account with the information passed if the username does not exist.
  			 * 
  			 * @param firstName
  			 * @param lastName
  			 * @param emailAddress
  			 * @param phoneNumber
  			 * @param username
  			 * @param password
  			 * @param educationalInstitution
  			 * @return true if account was created on replica.
  			 */
       case 0:  // idl/library/Library/createAccount
       {
         String firstName = in.read_string ();
         String lastName = in.read_string ();
         String emailAddress = in.read_string ();
         String phoneNumber = in.read_string ();
         String username = in.read_string ();
         String password = in.read_string ();
         String educationalInstitution = in.read_string ();
         boolean $result = false;
         $result = this.createAccount (firstName, lastName, emailAddress, phoneNumber, username, password, educationalInstitution);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  /**
  			 * Attempts to find if the book exist (quantity should be greater than 0 to successfully reserve). If it does, then 
  			 * the corresponding quantity is decremented and the book is updated to the reserved book list of the student. The 
  			 * duration is set to 14 days by default.
  			 * 
  			 * @param username
  			 * @param password
  			 * @param bookName
  			 * @param authorName
  			 * @return true if book was successfully reserved. 
  			 */
       case 1:  // idl/library/Library/reserveBook
       {
         String username = in.read_string ();
         String password = in.read_string ();
         String bookName = in.read_string ();
         String authorName = in.read_string ();
         boolean $result = false;
         $result = this.reserveBook (username, password, bookName, authorName);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  /**
  			 * Similar to {@link #reserveBook(string username, string password, string bookName, string authorName)}, but tries 
  			 * to reserve the book in any of the libraries in the system.
  			 * 
  			 * @param username
  			 * @param password
  			 * @param bookName
  			 * @param authorName
  			 * @return true if book was successfully reserved. 
  			 */
       case 2:  // idl/library/Library/reserveInterLibrary
       {
         String username = in.read_string ();
         String password = in.read_string ();
         String bookName = in.read_string ();
         String authorName = in.read_string ();
         boolean $result = false;
         $result = this.reserveInterLibrary (username, password, bookName, authorName);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  /**
  			 * Lists all the students First Name, Last Name and Phone Number who have not returned the books with NumDays past 
  			 * their loan date in all the three educational institutions.
  			 * 
  			 * @param adminUsername
  			 * @param adminPassword
  			 * @param educationalInstitution
  			 * @param numDays
  			 * @return
  			 * @throws RemoteException
  			 */
       case 3:  // idl/library/Library/getNonRetuners
       {
         String adminUsername = in.read_string ();
         String adminPassword = in.read_string ();
         String educationalInstitution = in.read_string ();
         int numDays = in.read_long ();
         String $result[] = null;
         $result = this.getNonRetuners (adminUsername, adminPassword, educationalInstitution, numDays);
         out = $rh.createReply();
         idl.library.LibraryPackage.resultHelper.write (out, $result);
         break;
       }

       case 4:  // idl/library/Library/setDuration
       {
         String username = in.read_string ();
         String bookName = in.read_string ();
         int num_of_days = in.read_long ();
         boolean $result = false;
         $result = this.setDuration (username, bookName, num_of_days);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  /**
  			 * Shut down library and releases udp port.
  			 */
       case 5:  // idl/library/Library/shutDown
       {
         this.shutDown ();
         out = $rh.createReply();
         break;
       }


  /**
  			 * Set udpPort of the replica.
  			 * @param port The replica udp port.
  			 */
       case 6:  // idl/library/Library/setUdpPort
       {
         int port = in.read_long ();
         this.setUdpPort (port);
         out = $rh.createReply();
         break;
       }


  /**
  			 * set byzantine flag to say if replica with give wrong responses.
  			 * @param byzantineFlag True if replica should generate software errors.
  			 */
       case 7:  // idl/library/Library/setByzantineFlag
       {
         boolean byzantineFlag = in.read_boolean ();
         this.setByzantineFlag (byzantineFlag);
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:idl/library/Library:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Library _this() 
  {
    return LibraryHelper.narrow(
    super._this_object());
  }

  public Library _this(org.omg.CORBA.ORB orb) 
  {
    return LibraryHelper.narrow(
    super._this_object(orb));
  }


} // class LibraryPOA
